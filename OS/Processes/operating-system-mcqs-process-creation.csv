index,question,options,option1,option2,option3,option4,answer,explanation
1,Restricting the child process to a subset of the parent’s resources prevents any process from __________,"['a) overloading the system by using a lot of secondary storage', 'b) under-loading the system by very less CPU utilization', 'c) overloading the system by creating a lot of sub-processes', 'd) crashing the system by utilizing multiple resources']",a) overloading the system by using a lot of secondary storage,b) under-loading the system by very less CPU utilization,c) overloading the system by creating a lot of sub-processes,d) crashing the system by utilizing multiple resources,c,"Restricting the child process to a subset of the parent’s resources prevents any process from overloading the system by creating a lot of sub-processes. A process creates a child process, child process requires certain resources to complete its task. A child process can demand required resources directly from the system, but by doing this system will be overloaded. So to avoid overloading of the system, the parent process shares its resources among children."
2,A parent process calling _____ system call will be suspended until children processes terminate,"['a) wait', 'b) fork', 'c) exit', 'd) exec']",a) wait,b) fork,c) exit,d) exec,a,A parent process calling wait system call will be suspended until children processes terminate. A parameter is passed to wait system call which will obtain exit status of child as well as wait system call returns PID of terminated process.
3,Cascading termination refers to termination of all child processes if the parent process terminates ______,"['a) Normally', 'b) Abnormally', 'c) Normally or abnormally', 'd) None of the mentioned']",a) Normally,b) Abnormally,c) Normally or abnormally,d) None of the mentioned,c,Cascading termination refers to termination of all child processes if the parent process terminates Normally or Abnormally. Some systems don’t allow child processes to exist if the parent process has terminated. Cascading termination is normally initiated by the operating system.
4,With _____________ only one process can execute at a time; meanwhile all other process are waiting for the processor,"['a) Multiprocessing, Multiprogramming', 'b) Multiprogramming, Uniprocessing', 'c) Multiprogramming, Multiprocessing', 'd) Uniprogramming, Multiprocessing']","a) Multiprocessing, Multiprogramming","b) Multiprogramming, Uniprocessing","c) Multiprogramming, Multiprocessing","d) Uniprogramming, Multiprocessing",d,With Uniprogramming only one process can execute at a time; meanwhile all other processes are waiting for the processor. With Multiprocessing more than one process can run simultaneously each on different processors. The Uniprogramming system has only one program inside the core while the Multiprocessing system has multiple processes inside multiple cores. The core is one which executes instructions and stores data locally into registers.
5,"In UNIX, each process is identified by its __________","['a) Process Control Block', 'b) Device Queue', 'c) Process Identifier', 'd) None of the mentioned']",a) Process Control Block,b) Device Queue,c) Process Identifier,d) None of the mentioned,c,"In Unix, each process is identified by its Process Identifier or PID. The PID provides unique value to each process in the system so that each process can be identified uniquely."
6,"In UNIX, the return value for the fork system call is _____ for the child process and _____ for the parent process","['a) A Negative integer, Zero', 'b) Zero, A Negative integer', 'c) Zero, A nonzero integer', 'd) A nonzero integer, Zero']","a) A Negative integer, Zero","b) Zero, A Negative integer","c) Zero, A nonzero integer","d) A nonzero integer, Zero",c,"In Unix, the return value of the fork system call is Zero for the child process and Non-zero value for parent process. A fork system call returns the PID of a newly created (child) process to the parent and returns Zero to that newly created (child) process."
7,The child process can __________,"['a) be a duplicate of the parent process', 'b) never be a duplicate of the parent process', 'c) cannot have another program loaded into it', 'd) never have another program loaded into it']",a) be a duplicate of the parent process,b) never be a duplicate of the parent process,c) cannot have another program loaded into it,d) never have another program loaded into it,a,The child process can be a duplicate of the parent process. The child process created by fork consists of a copy of the address space of the parent process.
8,"The child process completes execution, but the parent keeps executing, then the child process is known as __________","['a) Orphan', 'b) Zombie', 'c) Body', 'd) Dead']",a) Orphan,b) Zombie,c) Body,d) Dead,b,"The child process completes execution, but the parent keeps executing, then the child process is known as Zombie. When a child process terminates, its resources get deallocated but its entry in the Process Control Block (PCB) remains there until its parent calls wait system call."
